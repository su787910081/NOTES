本地分支：
    创建分支
        $ git branch testing
    合并分支
        将dev 分支的最新版本合并到当前版本中来
        参数：--no-ff 是指定不要进行快照处理，这样做有利于查看日志树。
            $ git merge dev --no-ff
        如果合并失败，两个分支有文件是冲突的，则我们可以先回退到原来的状态
            $ git merge --abort
        查看未合并的分支 
            如果想知道哪个分支还没有合并到当前分支，可以使用下面的命令来查看 
                $ git branch --no-merged
        删除本地分支 
            删除本地分支时，HEAD 指针不能指向该分支，必须要先切换到其他分支，
            而且如果指定要删除的分支没有合并到其他任何分支，那它也不允许被删除
                $ git branch -d <分支名>
远程分支：
    将本地分支推送到远程服务器
        $ git push origin <分支名>
    从本地拉取远程服务器分支
        $ git pull origin <分支名>
    删除远程分支 - 该命令会保留本地的该分支
        $ git push origin --delete <分支名>
查看日志：
    这个命令可以查看到HEAD 指针所指向的哪一个分支 
    同时也可以知道其他分支当前指向哪一个节点
    主要是后面的一个参数 ：--decorate
        $ git log --oneline --decorate
    参数：--all 查看所有日志历史 
    参数 ：--oneline 一行显示 
    参数 ：--graph 按图形样式进行显示 
        $ git log --oneline --decorate --graph --all
回滚文件：
    该命令会将当前工作目录中修改的文件回滚到最后一次git add 快照的地方。
    同时也可以将本地删除的文件从最后一次git add 快照中更新下来。
    其效果等同于svn revert
        $ git checkout -- <filename>
    但是此命令不能将已经git add 里面(跟踪列表)的文件回滚下来，
    如果想要将add 里面(跟踪列表)回滚下来，
    则需要与另外一个命令合作: git reset
        将文件从git add 的快照中剃除，但不会变更文件内容
        即：取消暂存
            $ git reset HEAD <filename>
        将文件回滚到最后一次commit 状态，完全回滚该文件的内容
            $ git checkout -- <filename>
    当前分支回退到一个指定的历史版本(10ae329),
    该命令会将本地的文件覆盖掉，使用的时候需要小心。
        $ git reset --hard 10ae329
撤消提交：
    该命令会替换掉你上一次的提交记录，并使用当前的提交更新。
    其实际就是修改上一次的提交记录日志信息，
    并且将当前的文件变更与上一次的变更进行合并。
        $ git commit --amend
标签：
    查看当前已有的标签 
        $ git tag
    过滤标签 
        $ git tag -l 'v1.8.5*'
    附注标签 
        $ git tag -a v1.4 -m "my version 1.4"
    查看标签对应的提交信息
        $ git show v1.4
变基：
    不要对在你的仓库外有副本的分支执行变基
    我的理解就是：你应该只对你的私人仓库里面的分支使用变基
储藏：
    有时候在项目的一部分已经工作了一段时间之后，
    想要切换到另一个分支去做一点别的事情 ，
    而不想将当前的变更提交，也不想丢失当前的变更 ，
    这个时候我们可以使用储藏，将当前的变更保存到栈上。
        $ git stash 或者 git stash save
    这个时候使用 git status 查看当前工作目录是干净的。
    如果想要查看储藏的东西可以使用
        $ git stash list
    如果想要将储藏的代码重新应用，则可以使用
        $ git stash apply [stash@{0}]
        最后的那一个参数为使用git stash list 列出来的储藏名称，
        如果多个的话就需要用它来区分了。
    直接从储藏的代码创建一个分支
        $ git stash branch
    移除每一样东西，并存放到栈中
    然后可以使用git stash apply 把栈中的储藏取回来
        $ git stash --all
        $ git stash apply 取回储藏的文件
清理：
    对工作目录进行清理工作可以使用
        $ git clean -d -f
    对工作目录进行清理工作之前可以使用下面的命令先看一下它会清理哪些文件
        $ git clean -d -n
    如果有些文件被加入到.gitignore 中，那么使用简单的clean 是无法清理的
    但是可以加一个-x 参数 
        $ git clean -d -x -n
子模块：
    添加一个子模块到当前项目的当前目录，如果想要改变目录，可以在后面添加一个指定目录
        $ git submodule add <URL 地址>
    如果clone 了一个含有子模块的项目，那么clone 下来的子模块的目录下面是空的
    而接下来你需要使用两个命令来获取它的代码文件
        初始化本地配置文件
            $ git submodule init
        从该项目的父项目中检出项目中列出的合适的提交
        这个命令会根据父项目所在的版本来找出子模块对应的版本
            $ git submodule update
    以上两步可以全并到clone 的时候指定一个参数就可以实现 
        $ git clone --recursive <URL 地址>
    想要拉取服务器上的子模块代码，则需要进入到子模块中，然后再拉取代码。
        $ cd submodule_dir
        $ git fetch
        $ git merge origin/master
    如果并不想进入到子模块目录中，还可以使用下面的命令直接拉取子模块的master 分支 
    当然了，你也可以指定分支，这里我就懒得记录了。
        $ git submodule update --remote [子模块名字]
    删除一个子模块
        $ git submodule deinit [子模块名字]
        $ git rm --cached [子模块名字]
获取一个git 的历史版本：
    如果想要获取一个git 的历史版本可以使用下面的命令
        这里面的history 是一个新建的分支名后面跟的是一个历史日志SHA 值 
            $ git branch history c6e1e96





场景问题：
    这样的一个情况，如果存在子模块，而子模块有一定的提交日志和过程了。
    主项目同样也有提交日志过程。
    现在出现了一个BUG，需要回到某一个历史版本去修复这个BUG，
    如果我在主项目中使用git branch history c6e1e96 创建了一个历史版本的分支，
    请问，这个时候的子模块是否也会回到对应的历史版本？
        答：这种情况主项目回退到了历史版本，但是子模块还是原分支的版本，
        这个时候在主项目目录中使用git status 还可以看到该子模块。
        不过还好，git 为我们记录了对应子模块的commit id, 
        这个时候我们可以使用git submodule update 来将子模块更新到对应的历史版本。

