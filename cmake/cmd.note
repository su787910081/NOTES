CMAKE 命令：
#####################################################################################################################
    ADD_DEPENDENCIES: 
        添加编译依赖，让一个顶层目标依赖于其他的顶层目标。
        一个顶层目标是由命令ADD_EXECUTABLE，ADD_LIBRARY，或者ADD_CUSTOM_TARGET产生的目标。
        
#####################################################################################################################
    STRING:
        STRING (REPLACE "/MD" "/MT" "${flag}" "${${flag}}")
            将"/MD" 换成"/MT"
            
#####################################################################################################################
    AUX_SOURCE_DIRECTORY:
        AUX_SOURCE_DIRECTORY(. DIR_SRCS) 将当前目录下的所有文件添加到变量DIR_SRCS 中.
        
#####################################################################################################################
    TARGET_LINK_LIBRARIES:
        指定目标程序 所依赖的链接 库，示例如下：
            TARGET_LINK_LIBRARIES(testpro.exe log4cplus.lib)

#####################################################################################################################
    MESSAGE 指令的语法是：
        MESSAGE([SEND_ERROR |STATUS | FATAL_ERROR] "message to display" ...)
        
        这个指令用于向终端输出用户定义的信息，包含了三种类型:
            SEND_ERROR，产生错误，生成过程被跳过。
            SATUS — ，输出前缀为 的信息。
            FATAL_ERROR，立即终止所有 cmake 过程.
        我们在这里使用的是 STATUS 信息输出，演示了由 PROJECT 指令定义的两个隐式变量
        HELLO_BINARY_DIR 和 HELLO_SOURCE_DIR.
        
        (none)         = Important information
        STATUS         = Incidental information
        WARNING        = CMake Warning, continue processing
        AUTHOR_WARNING = CMake Warning (dev), continue processing
        SEND_ERROR     = CMake Error, continue processing,
                                      but skip generation
        FATAL_ERROR    = CMake Error, stop processing and generation
        DEPRECATION    = CMake Deprecation Error or Warning if variable
                         CMAKE_ERROR_DEPRECATED or CMAKE_WARN_DEPRECATED
                         is enabled, respectively, else no message.

#####################################################################################################################
    INCLUDE_DIRECTORIES:
        INCLUDE_DIRECTORIES，其完整语法为：
        INCLUDE_DIRECTORIES([AFTER|BEFORE][SYSTEM] dir1 dir2...)

        这条指令可以用来向工程添加多个特定的头文件搜索路径，路径之间用空格分割，如果路径
        中包含了空格，可以使用双引号将它括起来，默认的行为是追加到当前的头文件搜索路径的
        后面，你可以通过两种方式来进行控制搜索路径添加的方式：
            １，CMAKE_INCLUDE_DIRECTORIES_BEFORE，通过 SET 这个 cmake 变量为 on，可以
        将添加的头文件搜索路径放在已有路径的前面。
            ２，通过 AFTER 或者 BEFORE 参数，也可以控制是追加还是置前。

        现在我们在 src/CMakeLists.txt 中添加一个头文件搜索路径，方式很简单，加入：
            INCLUDE_DIRECTORIES(/usr/include/hello)
            
#####################################################################################################################
    ADD_SUBDIRECTORY:
        语法解释：
            ADD_SUBDIRECTORY(source_dir [binary_dir] [EXCLUDE_FROM_ALL])
            
            这个指令用于向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存
                放的位置。EXCLUDE_FROM_ALL 参数的含义是将这个目录从编译过程中排除，比如，工程
                的 example，可能就需要工程构建完成后，再进入 example 目录单独进行构建(当然，你
                也可以通过定义依赖来解决此类问题)。
        
        上面的例子定义了将 src 子目录加入工程，并指定编译输出(包含编译中间结果)路径为
            bin 目录。如果不进行 bin 目录的指定，那么编译结果(包括中间结果)都将存放在
            build/src 目录(这个目录跟原有的 src 目录对应)，指定 bin 目录后，相当于在编译时
            将 src 重命名为 bin，所有的中间结果和目标二进制都将存放在 bin 目录。
        
        EXCLUDE_FROM_ALL选项: 
            从make all 中排除，在使用make 不带参数时，该目标项目将不会被编译，
            但是如果被某个目标依赖了，那么它就会被编译。
            
#####################################################################################################################
    ADD_EXECUTABLE: 
        ADD_EXECUTABLE(hello ${SRC_LIST})
        
#####################################################################################################################

#####################################################################################################################

#####################################################################################################################

#####################################################################################################################

#####################################################################################################################

#####################################################################################################################

#####################################################################################################################


